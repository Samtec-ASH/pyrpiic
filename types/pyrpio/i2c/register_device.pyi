"""
This type stub file was generated by pyright.
"""

from typing import Collection, Tuple
from .i2c import I2C

format_size = { 1: 'B',2: 'H',4: 'I',8: 'Q' }
class I2CRegisterDevice:
    def __init__(self, bus: I2C, address: int, register_size: int = ..., data_size: int = ...):
        '''
        [summary]

        Args:
            bus (I2C): i2c bus to use to communicate with the device
            address (int): i2c address of the device
            register_size (int, optional): register address size in bytes. Defaults to 1.
            data_size (int, optional): register size in bytes. Defaults to 1.
        '''
        ...
    
    def read_register(self, register: int) -> int:
        '''
        [summary]

        Args:
            register (int): [description]

        Returns:
            int: [description]
        '''
        ...
    
    def read_register_bytes(self, register: int) -> bytes:
        '''
        [summary]

        Args:
            register (int): [description]

        Returns:
            bytes: [description]
        '''
        ...
    
    def write_register(self, register: int, data: int):
        '''
        [summary]

        Args:
            register (int): [description]
            data (int): [description]
        '''
        ...
    
    def write_register_bytes(self, register: int, data: bytes):
        '''
        [summary]

        Args:
            register (int): [description]
            data (bytes): [description]
        '''
        ...
    
    def read_register_sequential(self, register: int, length: int) -> Tuple[int]:
        '''
        [summary]

        Args:
            register (int): [description]
            length (int): [description]

        Returns:
            Tuple[int]: [description]
        '''
        ...
    
    def read_register_sequential_bytes(self, register: int, length: int) -> bytes:
        '''
        [summary]

        Args:
            register (int): [description]
            length (int): [description]

        Returns:
            bytes: [description]
        '''
        ...
    
    def write_register_sequential(self, register: int, data: Collection[int]):
        '''
        [summary]

        Args:
            register (int): [description]
            data (Collection[int]): [description]
        '''
        ...
    
    def write_register_sequential_bytes(self, register: int, data: bytes):
        '''
        [summary]

        Args:
            register (int): [description]
            data (bytes): [description]
        '''
        ...
    


